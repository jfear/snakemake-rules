# -*- snakemake -*-
import shutil
from snakemake.exceptions import RuleException

def _picard_merge_sam_input_fn(wildcards):
    raise RuleException("""Implement function for generating source files and apply
    workflow.rules.picard_merge_sam.set_input(function) to set the
    input function for the picard_merge_sam rule. The function should
    return a list of bam files to be merged""")


config_default = {
    'bio.ngs.qc.picard' : {
        'merge_sam' : {
            'label' : "merge", # target label
            'options' : "CREATE_INDEX=true",
            'output' : [],
        },
    },
}

update_config(config_default, config)
config = config_default


rule picard_merge_sam:
    """Picard: merge sam files.

    NB: always outputs bam files!
    """
    params: cmd = config['bio.ngs.qc.picard']['cmd'] + MERGE_SAM_FILES,
            options = " ".join([config['bio.ngs.qc.picard']['options'],
                                config['bio.ngs.qc.picard']['merge_sam']['options']])
    input: _picard_merge_sam_input_fn
    output: merge="{prefix}." + config['bio.ngs.qc.picard']['merge_sam']['label'] + ".bam"
    run: 
      if (len(input) > 1):
          inputstr = " ".join(["INPUT={}".format(x) for x in input])
          shell("{cmd} {ips} OUTPUT={out} {opt}".format(cmd=params.cmd, ips=inputstr, out=output.merge, opt=params.options))
      else:
          if os.path.exists(output.merge):
              os.unlink(output.merge)
          shutil.copy(input[0], output.merge)
